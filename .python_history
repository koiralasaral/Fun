python -c command
python -m module lag
help(module)
help(module):
help(input)
the_world_is_flat = True
if the_world_is_flat:
    print("Be careful not to fall off!")
# -*- coding: encoding -*-
# -*- coding: cp1252 -*-
#!/usr/bin/env python
# -*- coding: cp1252 -*-
# this is the first comment
spam = 1 # and this is the second comment
# ... and now a third!
text = "#This is not a comment because it's inside quotes."
# Using Python as calculator
# Numbers
/edit
\edit
/editor
help(edit)
2 + 2
50 - 5 * 6
(50 - 5*6) / 4
8 / 5
# division always returns a floating-point number
17/3 # classic division returns a float 
17 // 3 # floor division discards  the fractional part
17 % 3 # the % operator returns the remainder of the division
5 * 3 + 2 # floored quotient * divisor + remainder
5 ** 2 # 5 squared
2 ** 7 # 2 to the power of 7
width = 20
height = 5 * 9
width * height
n # try to access an undefined variable
4 * 3.75 - 1
tax = 12.5 / 100
price = 100.50
price * tax
price + _
round(_, 2)
3 + 5j
'spam eggs
'spam eggs'
'spam eggs' # single quotes
"Paris rabbit got your back :)! Yay!" # double quotes
'1975' # digits and numerals enclosed in quotes are also strings
'doesn\'t' # use \' to escape the single quotes...
"doesn\'t" # ...or use double quotes instead
'"Yes, " they said.'
"\"Yes, \" they said."
s = 'First line.\nSecond line.' # \n means newline 
s # without print(). special characters are inclued in the string
print(s)
# with print(), special characters are interpreted, so \n produces new line
print('C:\some\name') # here \n means newline!
print(r'C:\some\name') # note the r before the quote
print("""\
Usage: thingy [OPTIONS]
- h                 Display this usage message
-H hostname         Hostname to connect to
""")
# 3 times 'un', followed by 'ium'
3 * 'un' + 'ium'
'Py' + 'thon'
text = ('Put several strings within parantheses '
'to have them joined together.')
text
prefix = 'Py'
prefix 'thon'
('um' * 3) 'ium'
prefix + 'thon'
word = 'Python'
word = [0] # character in position 0
word[0] # character in position 0
word = 'Python'
word[0]
word[5]
word[-1] # Last character
word[-2] # second-last character
word[-6]
word[0:2] # characters from position 0 (included) to 2 (excluded)
word[2:5] # characters from position 2 (included) to 5 (excluded)
word[:2] # character from the beginning to position 2 (excluded)
word[4:] # characters from position 4 (included to the end)
word[-2:] # characters from the second-last (included) to the end
# Note how the start is always included, and the end id excluded.
word[:2] + word[2:]
word[:4] + word[4:]
word[42]
word[0] = 'J'
word[2:] = 'py'
'j' + word[1:]
word[:2] + 'py'
s = 'supercalifragiliisticexpialidociuos' 
len(s)
squares = [1, 4, 9, 16, 25]
squares
squares[0]
squares[-1]
squares[-3:] # slicing returns a new list
squares + [36, 49, 64, 81, 100]
cubes = [1, 8, 27, 65, 125] # something's wrong here
4 ** 3 # the cube of 4 is 64, not 65!
cubes[3] = 64 # replace the wrong value
cubes
cubes.append(216) # add the cube of 6
cubes.append(7 ** 3) # and the cube of 7
cubes
rgb = ["Red", "Green", "Blue"]
rgba = rgb
id(rgb) == id(rgba) # they reference the same object
rgba.append("Alph")
rgb
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
letters
# replace some values
letters[2:5] = ['C', 'D', 'E']
letters
# now remove them
letters[2:5] = []
letters
# clear the list by replacing all the elements with an empty list
letters[:] = []
letters
letters = ['a', 'b', 'c', 'd']
len(letters)
a = ['a', 'b', 'c']
n = [1, 2, 3]
x = [a, n]
x
x[0]
x[0][1]
# Fibonacci series:
# the sum of two elements defines the next
a, b = 0, 1
while a < 10:
    print(a)
    a, b = b, a+b
    
i = 256*256
print('The value of i is', i)
a, b = 0, 1
while a < 1000:
    print(a, end=',')
    a, b = b, a+b
    
pip install yahoofinance
quit()
install pip
pip install scipy
quit()
quit()
python -m timeit -s "setup here" "benchmarked code here"
hemp-all
help-all
python--help
python --help
quit()
py --list
quit()
#! python
import sys
sys.stdout.write("hello from Python %s\n" % (sys.version,))
py hello.py
quit()
import yfinance as yf
# Define the ticker symbol
ticker_symbol = "AAPL"
# Create a Ticker object
ticker = yf.Ticker(ticker_symbol)
# Fetch historical market data
historical_data = ticker.history(period="1y") # data for the last year
print("Historical Data:")
print(historical_data)
# Fetch basic financials
financials = ticker.financials
print("\nFinancials:")
print(financials)
# Fetch stock actions like dividends and splits
actions = ticker.actions
print("\nStock Actions:")
print(actions)
import pandas as pd
import yfinance as yf
from yahoofinancials import YahooFinancials
pip install yahoofinancials
quit()
